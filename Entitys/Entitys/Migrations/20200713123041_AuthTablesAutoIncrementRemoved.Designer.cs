// <auto-generated />
using System;
using Entitys.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

namespace Entitys.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200713123041_AuthTablesAutoIncrementRemoved")]
    partial class AuthTablesAutoIncrementRemoved
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("Entitys.Models.Auth.AuthModules", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<string>("Remark")
                        .HasColumnName("remark");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("auth_moduless");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthPermissions", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<string>("DisplayOrder")
                        .HasColumnName("display_order");

                    b.Property<int>("ModulId")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("PermissionCode")
                        .HasColumnName("permission_code");

                    b.Property<string>("PermissionName")
                        .HasColumnName("permission_name");

                    b.Property<string>("RelatedPermissionCodes")
                        .HasColumnName("related_permission_codes");

                    b.Property<string>("RelatedUielementCodes")
                        .HasColumnName("related_uielement_codes");

                    b.HasKey("Id");

                    b.HasIndex("ModulId");

                    b.ToTable("auth_permissions");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthRolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("PermissionId")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("auth_role_permissions");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthRoles", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("createdby");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("StructureId")
                        .HasColumnName("structure_id");

                    b.HasKey("Id");

                    b.ToTable("auth_roles");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthStructurePermission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("PermissionCodes")
                        .IsRequired()
                        .HasColumnName("permission_codes");

                    b.Property<int>("StructureId")
                        .HasColumnName("structure_id");

                    b.Property<string>("UIelementCodes")
                        .IsRequired()
                        .HasColumnName("uielement_codes");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.ToTable("auth_structure_permissins");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUIElements", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<string>("ElementCode")
                        .HasColumnName("element_code");

                    b.HasKey("Id");

                    b.ToTable("auth_uielements");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUserPermissions", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("PermissionId")
                        .HasColumnName("permission_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("auth_user_permissions");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUserRTokens", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("ClientId")
                        .HasColumnName("CLIENT_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED");

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN");

                    b.Property<DateTime>("Updated")
                        .HasColumnName("UPDATED");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AUTH_USER_RTOKENS");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUserRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AUTH_USER_ROLES");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUsers", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<int?>("CashierTypeId")
                        .HasColumnName("cashier_type_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("createdby");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("is_admin");

                    b.Property<bool?>("IsLogged")
                        .HasColumnName("IsLogged");

                    b.Property<bool?>("IsMain")
                        .HasColumnName("is_main");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middlename");

                    b.Property<int?>("OrgId")
                        .HasColumnName("org_id");

                    b.Property<string>("Password");

                    b.Property<string>("Salt")
                        .HasColumnName("salt");

                    b.Property<int>("StructureId")
                        .HasColumnName("structure_id");

                    b.Property<string>("Telefon")
                        .HasColumnName("telefon");

                    b.Property<string>("UserName")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.ToTable("auth_users");
                });

            modelBuilder.Entity("Entitys.Models.Auth.EventHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankKod")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("ModuleId")
                        .HasColumnName("MODULE_ID");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnName("SYSTEM_DATE");

                    b.Property<int>("UserEventType")
                        .HasColumnName("EVENT_TYPE");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("EVENT_HISTORY");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Book120", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<int?>("IncomeCount")
                        .HasColumnName("INCOME_COUNT");

                    b.Property<double?>("IncomeSumma")
                        .HasColumnName("INCOME_SUMMA");

                    b.Property<int?>("OutgoCount")
                        .HasColumnName("OUTGO_COUNT");

                    b.Property<double?>("OutgoSumma")
                        .HasColumnName("OUTGO_SUMMA");

                    b.Property<int>("SaldoBeginCount")
                        .HasColumnName("SALDO_BEGIN_COUNT");

                    b.Property<double>("SaldoBeginSumma")
                        .HasColumnName("SALDO_BEGIN_SUMMA");

                    b.Property<int?>("SaldoEndCount")
                        .HasColumnName("SALDO_END_COUNT");

                    b.Property<double?>("SaldoEndSumma")
                        .HasColumnName("SALDO_END_SUMMA");

                    b.HasKey("Id");

                    b.ToTable("BOOK_120");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Book121", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<int?>("InComeCount")
                        .HasColumnName("INCOME_COUNT");

                    b.Property<double?>("IncomeSumma")
                        .HasColumnName("INCOME_SUMMA");

                    b.Property<int>("KodValut")
                        .HasColumnName("KOD_VALUT");

                    b.Property<int?>("OutGoCount")
                        .HasColumnName("OUTGO_COUNT");

                    b.Property<double?>("OutgoSumma")
                        .HasColumnName("OUTGO_SUMMA");

                    b.Property<int>("SaldoBeginCount")
                        .HasColumnName("SALDO_BEGIN_COUNT");

                    b.Property<double>("SaldoBeginSumma")
                        .HasColumnName("SALDO_BEGIN_SUMMA");

                    b.Property<int?>("SaldoEndCount")
                        .HasColumnName("SALDO_END_COUNT");

                    b.Property<double?>("SaldoEndSumma")
                        .HasColumnName("SALDO_END_SUMMA");

                    b.HasKey("Id");

                    b.ToTable("BOOK_121");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Book141", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<int?>("InComeCount")
                        .HasColumnName("INCOME_COUNT");

                    b.Property<double?>("IncomeSumma")
                        .HasColumnName("INCOME_SUMMA");

                    b.Property<int?>("OutGoCount")
                        .HasColumnName("OUTGO_COUNT");

                    b.Property<double?>("OutgoSumma")
                        .HasColumnName("OUTGO_SUMMA");

                    b.Property<int>("SaldoBeginCount")
                        .HasColumnName("SALDO_BEGIN_COUNT");

                    b.Property<double>("SaldoBeginSumma")
                        .HasColumnName("SALDO_BEGIN_SUMMA");

                    b.Property<int?>("SaldoEndCount")
                        .HasColumnName("SALDO_END_COUNT");

                    b.Property<double?>("SaldoEndSumma")
                        .HasColumnName("SALDO_END_SUMMA");

                    b.HasKey("Id");

                    b.ToTable("BOOK_141");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Book141A", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<int?>("InComeCount")
                        .HasColumnName("INCOME_COUNT");

                    b.Property<double?>("IncomeSumma")
                        .HasColumnName("INCOME_SUMMA");

                    b.Property<int?>("OutGoCount")
                        .HasColumnName("OUTGO_COUNT");

                    b.Property<double?>("OutgoSumma")
                        .HasColumnName("OUTGO_SUMMA");

                    b.Property<int>("SaldoBeginCount")
                        .HasColumnName("SALDO_BEGIN_COUNT");

                    b.Property<double>("SaldoBeginSumma")
                        .HasColumnName("SALDO_BEGIN_SUMMA");

                    b.Property<int?>("SaldoEndCount")
                        .HasColumnName("SALDO_END_COUNT");

                    b.Property<double?>("SaldoEndSumma")
                        .HasColumnName("SALDO_END_SUMMA");

                    b.HasKey("Id");

                    b.ToTable("BOOK_141A");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Book155", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("Accept")
                        .HasColumnName("ACCEPT");

                    b.Property<double>("CashValue")
                        .HasColumnName("CASH_VALUE");

                    b.Property<int?>("CounterCashierId")
                        .HasColumnName("COUNTER_CASHIER_ID");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<bool>("From175")
                        .HasColumnName("FROM_175");

                    b.Property<int>("FromCashierId")
                        .HasColumnName("FROM_CASHIER_ID");

                    b.Property<int>("OperationId")
                        .HasColumnName("OPERATION_ID");

                    b.Property<int?>("SprObjectId")
                        .HasColumnName("SPR_OBJECT_ID");

                    b.Property<DateTime?>("SystemDate")
                        .HasColumnName("SYSTEM_DATE");

                    b.Property<int>("ToCashierId")
                        .HasColumnName("TO_CASHIER_ID");

                    b.Property<string>("WorthAccount")
                        .HasColumnName("WORTH_ACCOUNT");

                    b.HasKey("Id");

                    b.ToTable("BOOK_155");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Book171", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("AccountCode")
                        .HasColumnName("KOD_ACCOUNT")
                        .HasMaxLength(20);

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<int?>("IncomeCount")
                        .HasColumnName("INCOME_COUNT");

                    b.Property<double?>("IncomeSumma")
                        .HasColumnName("INCOME_SUMMA");

                    b.Property<int?>("OutgoCount")
                        .HasColumnName("OUTGO_COUNT");

                    b.Property<double?>("OutgoSumma")
                        .HasColumnName("OUTGO_SUMMA");

                    b.Property<int>("SaldoBeginCount")
                        .HasColumnName("SALDO_BEGIN_COUNT");

                    b.Property<double>("SaldoBeginSumma")
                        .HasColumnName("SALDO_BEGIN_SUMMA");

                    b.Property<int?>("SaldoEndCount")
                        .HasColumnName("SALDO_END_COUNT");

                    b.Property<double?>("SaldoEndSumma")
                        .HasColumnName("SALDO_END_SUMMA");

                    b.HasKey("Id");

                    b.ToTable("BOOK_171");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Book175", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("Accept")
                        .HasColumnName("ACCEPT");

                    b.Property<double>("CashValue")
                        .HasColumnName("CASH_VALUE");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<int>("FromCasheirId")
                        .HasColumnName("FROM_CASHIER_ID");

                    b.Property<int>("OperationId")
                        .HasColumnName("OPERATION_ID");

                    b.Property<int>("ToCashierId")
                        .HasColumnName("TO_CASHIER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_175");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.ChiefaccountantTable", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankKod")
                        .HasColumnName("BANK_KOD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreatedUserId")
                        .HasColumnName("CREATED_USER_ID");

                    b.Property<string>("FIO")
                        .HasColumnName("FIO");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnName("UPDATED_USER_ID");

                    b.HasKey("Id");

                    b.ToTable("CHIEFACCOUNTANT");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Collector", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<int>("Journal16Id")
                        .HasColumnName("JOURNAL_16_ID");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnName("SYSTEM_DATE");

                    b.HasKey("Id");

                    b.HasIndex("Journal16Id");

                    b.ToTable("COLLECTOR");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.CounterCashier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("Active")
                        .HasColumnName("ACTIVE");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<string>("Name")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("COUNTER_CASHIER");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal109", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("Count")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<int>("SymbolCode")
                        .HasColumnName("SYMBOL_KOD");

                    b.Property<string>("SymbolName")
                        .HasColumnName("SYMBOL_NAME");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_109");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal109Val", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankKod")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("Count")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<int>("SymbolKod")
                        .HasColumnName("SYMBOL_KOD");

                    b.Property<string>("SymbolName")
                        .HasColumnName("SYMBOL_NAME");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<int>("ValutKod")
                        .HasColumnName("VALUT_KOD");

                    b.Property<string>("ValutName")
                        .HasColumnName("VALUT_NAME");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_109_VAL");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal109Worth", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankKod")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("Count")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<int>("SymbolKod")
                        .HasColumnName("SYMBOL_KOD");

                    b.Property<string>("SymbolName")
                        .HasColumnName("SYMBOL_NAME");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_109_WORTH");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal110", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("Count")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<int>("SymbolCode")
                        .HasColumnName("SYMBOL_KOD");

                    b.Property<string>("SymbolName")
                        .HasColumnName("SYMBOL_NAME");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_110");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal110Val", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankKod")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("Count")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<int>("SymbolKod")
                        .HasColumnName("SYMBOL_KOD");

                    b.Property<string>("SymbolName")
                        .HasColumnName("SYMBOL_NAME");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<int>("ValutKod")
                        .HasColumnName("VALUT_KOD");

                    b.Property<string>("ValutName")
                        .HasColumnName("VALUT_NAME");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_110_VAL");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal110Worth", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankKod")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("Count")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<int>("SymbolKod")
                        .HasColumnName("SYMBOL_KOD");

                    b.Property<string>("SymbolName")
                        .HasColumnName("SYMBOL_NAME");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_110_WORTH");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal111", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankKod")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("Count")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<int>("OperKod")
                        .HasColumnName("OPER_KOD");

                    b.Property<string>("OperName")
                        .HasColumnName("OPER_NAME");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_111");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal123", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnName("SYSTEM_DATE");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_123");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal123Content", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_KOD");

                    b.Property<int>("Count")
                        .HasColumnName("COUNT");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<int>("Journal123Id")
                        .HasColumnName("JOURNAL_123_ID");

                    b.Property<string>("Name")
                        .HasColumnName("NAME");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnName("SYSTEM_DATE");

                    b.Property<string>("Target")
                        .HasColumnName("TARGET");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Value")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_123_CONTENT");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal123Fio", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<int>("Journal123Id")
                        .HasColumnName("JOURNAL_123_ID");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_123_FIO");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal15", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("BagsNumber")
                        .HasColumnName("BAGS_NUMBER");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("IsEmpty")
                        .HasColumnName("IS_EMPTY");

                    b.Property<int>("Journal16Id")
                        .HasColumnName("JOURNAL_16_ID");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnName("SYSTEM_DATE");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("Journal16Id");

                    b.ToTable("JOURNAL_15");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal16", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<bool>("Accept")
                        .HasColumnName("ACCEPT");

                    b.Property<DateTime?>("AcceptDate")
                        .HasColumnName("ACCEPT_DATE");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<string>("DirectionNumber")
                        .HasColumnName("DIRECTION_NUMBER");

                    b.Property<int>("Status")
                        .HasColumnName("STATUS");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnName("SYSTEM_DATE");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("JOURNAL_16");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal176", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("BagNumber")
                        .HasColumnName("BAG_NUMBER");

                    b.Property<string>("Comment")
                        .HasColumnName("COMMENT");

                    b.Property<int?>("CounterCashierId")
                        .HasColumnName("COUNTER_CASHIER_ID");

                    b.Property<DateTime>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date16")
                        .HasColumnName("DATE_16");

                    b.Property<double>("ExcessSumma")
                        .HasColumnName("EXCESS_SUMMA");

                    b.Property<double>("FakeSumma")
                        .HasColumnName("FAKE_SUMMA");

                    b.Property<double>("LackSumma")
                        .HasColumnName("LACK_SUMMA");

                    b.Property<DateTime>("RealTime")
                        .HasColumnName("REAL_TIME");

                    b.Property<int>("ReceiptCount")
                        .HasColumnName("RECEIPT_COUNT");

                    b.Property<double>("ReceiptSumma")
                        .HasColumnName("RECEIPT_SUMMA");

                    b.Property<int>("Status")
                        .HasColumnName("STATUS");

                    b.Property<double>("Summa")
                        .HasColumnName("SUMMA");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<double>("WorthlessSumma")
                        .HasColumnName("WORTHLESS_SUMMA");

                    b.HasKey("Id");

                    b.HasIndex("CounterCashierId");

                    b.ToTable("JOURNAL_176");
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.SupervisingAccountant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("BankCode")
                        .HasColumnName("BANK_CODE");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreatedUserId")
                        .HasColumnName("CREATED_USER_ID");

                    b.Property<string>("Fio")
                        .HasColumnName("FIO");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnName("UPDATED_USER_ID");

                    b.HasKey("Id");

                    b.ToTable("SUP_ACCOUNTANT");
                });

            modelBuilder.Entity("Entitys.Models.Enums.CashierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("TYPE_CASHIERS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Бош кассир"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Кирим кассир"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Чиқим кассир"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Кечки кассир"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Қайта санаш кассири"
                        });
                });

            modelBuilder.Entity("Entitys.Models.Enums.EntOperations155", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("ENT_OPERATION_155");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Миллий валюта"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Халқаро валюта"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Қимматли"
                        });
                });

            modelBuilder.Entity("Entitys.Models.Enums.InOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("INOUT");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Кирим"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Чиқим"
                        });
                });

            modelBuilder.Entity("Entitys.Models.Enums.ModifiedBookSaldos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("MODIFIED_BOOK_SALDOS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "120 - китоб"
                        },
                        new
                        {
                            Id = 2,
                            Name = "121- китоб"
                        },
                        new
                        {
                            Id = 3,
                            Name = "171- китоб"
                        },
                        new
                        {
                            Id = 4,
                            Name = "141- китоб"
                        },
                        new
                        {
                            Id = 5,
                            Name = "141А- китоб"
                        },
                        new
                        {
                            Id = 6,
                            Name = "111 - китоб"
                        });
                });

            modelBuilder.Entity("Entitys.Models.Reference.RefCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("display_order");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ref_countries");
                });

            modelBuilder.Entity("Entitys.Models.Reference.RefDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("display_order");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id");

                    b.Property<string>("ShortName")
                        .HasColumnName("shortname");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("ref_districts");
                });

            modelBuilder.Entity("Entitys.Models.Reference.RefRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("display_order");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnName("shortname");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("ref_regions");
                });

            modelBuilder.Entity("Entitys.Models.Reference.RefStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ref_structures");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthModules", b =>
                {
                    b.HasOne("Entitys.Models.Auth.AuthModules", "ModulModel")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthPermissions", b =>
                {
                    b.HasOne("Entitys.Models.Auth.AuthModules", "ModulModel")
                        .WithMany()
                        .HasForeignKey("ModulId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthRolePermissions", b =>
                {
                    b.HasOne("Entitys.Models.Auth.AuthPermissions", "PermissionModel")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entitys.Models.Auth.AuthRoles", "AuthRolesModel")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthStructurePermission", b =>
                {
                    b.HasOne("Entitys.Models.Reference.RefStructure", "RefStructureModel")
                        .WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUserPermissions", b =>
                {
                    b.HasOne("Entitys.Models.Auth.AuthPermissions", "PermissionModel")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entitys.Models.Auth.AuthUsers", "UsersModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUserRTokens", b =>
                {
                    b.HasOne("Entitys.Models.Auth.AuthUsers", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUserRole", b =>
                {
                    b.HasOne("Entitys.Models.Auth.AuthRoles", "AuthRolesModel")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entitys.Models.Auth.AuthUsers", "UsersModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.Auth.AuthUsers", b =>
                {
                    b.HasOne("Entitys.Models.Reference.RefStructure", "RefStructureModel")
                        .WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Collector", b =>
                {
                    b.HasOne("Entitys.Models.CashOperation.Journal16", "Book16Model")
                        .WithMany()
                        .HasForeignKey("Journal16Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal15", b =>
                {
                    b.HasOne("Entitys.Models.CashOperation.Journal16", "Book16Model")
                        .WithMany()
                        .HasForeignKey("Journal16Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.CashOperation.Journal176", b =>
                {
                    b.HasOne("Entitys.Models.CashOperation.CounterCashier", "CounterCashierModel")
                        .WithMany()
                        .HasForeignKey("CounterCashierId");
                });

            modelBuilder.Entity("Entitys.Models.Reference.RefDistrict", b =>
                {
                    b.HasOne("Entitys.Models.Reference.RefRegion", "RefRegionModel")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entitys.Models.Reference.RefRegion", b =>
                {
                    b.HasOne("Entitys.Models.Reference.RefCountry", "RefCountryModel")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
